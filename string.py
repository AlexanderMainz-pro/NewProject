# is оператор, возвращет True, если ссылки ведут на одну и ту-же области памяти
# id() возвращет идентификатор адреса памяти
# 'текст' in 'текст' слеваа вводим слово, проврить, есть ли оно справа

# 'The worlds fastest plane'.find('plane') при фолс выведе -1
# 'The worlds fastest plane'.index('car') #=> ValueError: substring not found при фолс выведе ValueError
# index(слово, index, index) можно нйти нужные знчения в заданной области
# min() возвращает символ строки, имеющий наименьший код.

# rfind() похож на метод find(), но он, в отличие от find(),
# просматривает строку не слева направо, а справа налево,
# возвращая индекс первого найденного вхождения искомой подстроки.
#story = 'The price is right said Bob. The price is right.'
#story.rfind('is')
#=> 39


# .upper делает все буквы заглавными
# .lower делает все буквы прописные
# isupper проверяет всю строку на верхний регистр
# islower проверяет всю строку на нижний регистр
# .title(), приводящий к верхнему регистру первую букву каждого слова в строке
# .istitle() проверяет каждую слово на заглавную букву
# capitalize все словаа с заглвной буквы
# .isalpha() возвращает True в том случае, если все символы в строке являются буквами.
# .isalnum() проверяет состав алфавитно-цифровых символов входят буквы и цифры

# find(символы поиска) поиск символа в строке, возвращет индекс
# split(", ") разбивает строку по определённому символу запятая, точка, далее можно получить эти элементы по индексу
# join() объединяет элементы списков в строку
# insert принимает два паараметра, первый индекс, второй собственно значение
# extern принимает в качестве параметра тоже список,добавляет в конец
# sort() отсортировывает список
# reversed() все элементы переворачивааются местами
# pop() если ничего не передавать, последний элемент удалиться, можно по индексу, можно использоваать отрицательные списки
# remove() принимает по значению, какой элемент нужно удалить
# clear() очищает весь список
# count() поиск сколько совпадений по значению
# len() показывает размер списка
# splitlines() разделяет строки по символам разрыва строки.
# .lstrip(), .rstrip() и .strip() #убирает лишние пробелы
# .startswith() и .endswith() проверяет заданную последовательность
# .isspace(), который возвращает True только в том случае, если строка состоит исключительно из пробелов.

# upper() делает все буквы заглавными
#animal = 'fish'
#print(animal[0].upper() + animal[1:-1] + animal[-1].upper())

#isnumeric(), который возвращает True в том случае, если все символы, входящие в строку, являются цифрами.
#.isascii() возвращает True в том случае, если все символы, имеющиеся в строке, входят в ASCII

#name = 'Chris' #f-строки
#food = 'creme brulee'
#print(f'My name is {name} and I like {food}.')

#difficulty = 'easy' #вставлять файлы в готовый текст .format()
#thing = 'exam'
#print('That {} was {}!'.format(thing, difficulty))
##=> 'That exam was easy!'

#string[start_index:end_index:step] срез строки
#string = 'I like to eat apples'
#string[:6] #=> 'I like'
#string[7:13] #=> 'to eat'
#string[0:-1:2] #=> 'Ilk oetape' (каждый 2-й символ)

#sentence = 'Sally sells sea shells by the sea shore' # вствка в уже существующую строку
#sentence.replace('sea', 'mountain')
#=> 'Sally sells mountain shells by the mountain shore'

#partition() разбивает строку по заданной подстроке. После этого результат возвращается в виде кортежа.
#При этом подстрока, по которой осуществлялась разбивка, тоже входит в кортеж.
#sentence = "If you want to be a ninja"
#print(sentence.partition(' want '))
#=> ('If you', ' want ', 'to be a ninja')

# .maketrans() позволяет описать отображение одних символов на другие, возвращая таблицу преобразования.
# translate() позволяет применить заданную таблицу для преобразования строки
# создаём отображение
#mapping = str.maketrans("abcs", "123S")
# преобразуем строку
#"abc are the first three letters".translate(mapping)
#=> '123 1re the firSt three letterS'